entity.component.html<app-progress-line *ngIf="isRequesting"></app-progress-line>   <app-page-container maintitle="Entity">   <form [formGroup]="form">  <div class="row">     <div class="col-md-6 unit">        <label class="label">Type</label>         <input formControlName="entityType"  class="form-control" type="text" placeholder="{{'Type'}}" id="entityType" name="entityType">            <div *ngIf="form.controls['entityType'].invalid && (form.controls['entityType'].dirty || form.controls['entityType'].touched)" class="alert alert-danger">            <div class="error-message-inline" *ngIf="form.controls['entityType'].errors.required">              Type  is required.            </div>        </div>        </div>       <div class="col-md-6 unit">          <label class="label">Name</label>            <input formControlName="entityName" class="form-control" type="text" placeholder="{{'Name'}}" id="entityName" name="entityName">             <div *ngIf="form.controls['entityName'].invalid && (form.controls['entityName'].dirty || form.controls['entityName'].touched)" class="alert alert-danger">              <div class="error-message-inline" *ngIf="form.controls['entityName'].errors.required">                Name  is required.              </div>          </div>        </div>      <div class="col-md-6 unit">        <label class="label">Status</label>            <div class="form-check form-check-inline">                <input class="form-check-input" type="radio" id="active"  value="A" name="entityStatus" formControlName="entityStatus">                <label class="form-check-label">Active</label>            </div>            <div class="form-check form-check-inline mr-1">                <input class="form-check-input" type="radio" id="deactive" value="D" name="entityStatus" formControlName="entityStatus">                <label class="form-check-label">Deactive</label>            </div>      </div>             <div class="col-md-6 unit">          <label class="label">Location ID: </label>          <label class="input select">          <select id="locationId" formControlName="locationId" class="form-control">            <option value="">Select Location</option>            <option *ngFor="let location of countries" value="{{location['id']}}">{{location['location_name']}}</option>          </select>          <i></i>          </label>        </div>      <div class="col-md-6 unit">         <input formControlName="entityId" class="form-control" type="hidden"  id="entityId" name="entityId">         <input formControlName="id" class="form-control" type="hidden"  id="id" name="id">        </div>     </div>    <button (click)="SubmitForm()" class="btn btn-primary" *ngIf="IsEditing()">Edit</button>    <button (click)="SubmitForm()" [disabled] = "!form.valid" class="btn btn-primary" *ngIf="!IsEditing()">Save</button>     &nbsp;<a class="btn btn-danger app-user-single-cancel" routerLink="/index">Cancel</a>  </form>
 </app-page-container>  
entity.compont.tsimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';import { FormGroup, FormControl, Validators} from '@angular/forms';import { error, IsSuccessEntity } from '@app/common';import { ActivatedRoute, Router } from '@angular/router';import { EntityService } from 'app/iot/entity/entity.service';import {EntityDetail, EntityDetail1} from '@app/iot/company.interface';import {DetailsService } from  '../shared/details/details.service';import { CompanyService } from 'app/iot/company/company.service';import { LocationService } from 'app/iot/location/location.service';

@Component({  selector: 'app-entity',  templateUrl: './entity.component.html',  styleUrls: ['./entity.component.scss']})
export class EntityComponent implements OnInit {@Input() entity: EntityDetail1;@Input() result:string=""; @Output() clicked=new EventEmitter<string>();   products:any = [];  public error = error;  public form = new FormGroup({  /* id: new FormControl(''),  type: new FormControl('', [Validators.required]),  name: new FormControl('', [Validators.required]),  status: new FormControl('', [Validators.required]),  location_id: new FormControl(''), */  id: new FormControl(''),  entityId: new FormControl(''),  entityType: new FormControl('', [Validators.required]),  entityName: new FormControl('', [Validators.required]),  entityStatus: new FormControl('', [Validators.required]),  locationId: new FormControl(''),}); 
  countries;  constructor(    private requests: EntityService,    private route: ActivatedRoute,    private router: Router,    private EntityService: EntityService,    public detailsService: DetailsService,    public companyService: CompanyService,     ) { }
  public IsEditing () { // return this.form.controls.id.value ? true : false;   return this.form.controls.id.value ? true : false;  }
  ngOnInit() {    if(this.entity!=null && this.entity!=undefined){      console.log(this.entity.id + "Entity id get");      let  entityJSON = {entityId: this.entity.id,        entityType: this.entity.type,        entityName: this.entity.name,        entityStatus: this.entity.status,        locationId: this.entity.location_id,       }       console.log("entityJSON: " +  JSON.stringify(entityJSON));       // this.form.patchValue(response.data);       this.form.patchValue(entityJSON);    //this.EntityService.getEntity(this.entity.id).subscribe((response: any) => {    /*  this.EntityService.getEntity(this.entity.id).subscribe((response: any) => {       this.entity = response.data;        }); */  }         this.EntityService.getAllLocation().subscribe((response: any) => {       this.countries = response;      this.form.patchValue(response);      });  }SubmitForm() {  this.EntityService.PostEntity(this.form.value)    .subscribe( data => {      this.router.navigateByUrl('/index');    });}}

entity.service.tsimport { Injectable } from '@angular/core';import {IUser} from '@app/definitions';import 'rxjs/add/observable/of';import { Store } from '@ngrx/store';import { HttpClient } from '@angular/common/http';import { IResponse } from 'response-type';import { GetNetworkError, IsSuccessEntity, GetUrl } from '@app/common';import 'rxjs/add/operator/toPromise';import {LocationDetail, EntityDetail} from '@app/iot/company.interface';import { Observable} from 'rxjs';

  @Injectable({    providedIn: 'root'  })    export class EntityService {      constructor(      private http: HttpClient,      private store: Store<EntityDetail>,    ) { }    baseUrl: string = 'http://localhost:8080/UserManagementApp/entity/entity';    baseUrlAllLocation: string = 'http://localhost:8080/UserManagementApp/location/getAllLocation/';          getAllLocation(): Observable<LocationDetail> {      /* const headers = {        'Authorization': 'Bearer ' + JSON.parse(window.sessionStorage.getItem('token')).access_token,        'Content-type': 'application/json'      } */      const headers = {        'X-Auth-Token': window.sessionStorage.getItem('token'),        'Content-type': 'application/json'      }      return this.http.get<LocationDetail>(this.baseUrlAllLocation, {headers});    }         //getEntity(id): Observable<EntityDetail> {    getEntity(entityId): Observable<EntityDetail> {             /*  const headers = {          'Authorization': 'Bearer ' + JSON.parse(window.sessionStorage.getItem('token')).access_token,          'Content-type': 'application/json'        } */        const headers = {          'X-Auth-Token': window.sessionStorage.getItem('token'),          'Content-type': 'application/json'        }       // return this.http.get<EntityDetail>(this.baseUrl + id, {headers});        return this.http.get<EntityDetail>(this.baseUrl + entityId, {headers});      }            PostEntity(entity: EntityDetail){      /* const headers = {        'Authorization': 'Bearer ' + JSON.parse(window.sessionStorage.getItem('token')).access_token,        'Content-type': 'application/json'      } */      /* const headers = {        'X-Auth-Token': window.sessionStorage.getItem('token'),        'Content-type': 'application/json'      }      return this.http.post(this.baseUrl, entity, {headers}); */      let entityDet = entity;      console.log("entity" + entityDet);      console.log("entity id" + entityDet.entityId);      const headers = {        'X-Auth-Token': window.sessionStorage.getItem('token'),        'Content-type': 'application/json'      }      if(entity.entityId){        return this.http.put(this.baseUrl + "/" + entity.entityId, entity, {headers});      }else{       return this.http.post(this.baseUrl, entity, {headers});      }    }     // deleteEntity(id: number){    deleteEntity(entity: EntityDetail){      /* const headers = {        'Authorization': 'Bearer ' + JSON.parse(window.sessionStorage.getItem('token')).access_token,        'Content-type': 'application/json'      } */      const headers = {        'X-Auth-Token': window.sessionStorage.getItem('token'),        'Content-type': 'application/json'      }     // return this.http.delete(this.baseUrl+id,{headers});      return this.http.delete(this.baseUrl + "/" + entity.id + "/" + entity.location_id, {headers});    }  }
company.interface.tsexport interface EntityDetail {  /*  id: number;  type: string;  name: string;  status: string;  location_id: number; */  id: number;  entityId: number;  entityType: string;  entityName: string;  entityStatus: string;  locationId: number;  location_id: number;}
location.compont.tsimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';import { FormGroup, FormControl, Validators} from '@angular/forms';import { error, IsSuccessEntity } from '@app/common';import { ActivatedRoute, Router } from '@angular/router';import { LocationService } from 'app/iot/location/location.service';import {LocationDetail} from '@app/iot/company.interface';import {DetailsService } from  '../shared/details/details.service';import { CompanyService } from 'app/iot/company/company.service';
@Component({  selector: 'app-location',  templateUrl: './location.component.html',  styleUrls: ['./location.component.scss']})
export class LocationComponent implements OnInit {  @Input() location: LocationDetail;  @Input() result:string="";   @Output() clicked=new EventEmitter<string>();    products:any = [];   public error = error;   public form = new FormGroup({    id: new FormControl(''),    location_name: new FormControl('', [Validators.required]),    woeid: new FormControl(''),    streetaddr: new FormControl(''),    city: new FormControl(''),    state: new FormControl(''),    country: new FormControl(''),    company_id: new FormControl(''),  });   countries;      constructor(     private requests: LocationService,     private route: ActivatedRoute,     private router: Router,     private LocationService: LocationService,     public detailsService: DetailsService,     public companyService: CompanyService,   ) { }    public IsEditing () {    return this.form.controls.id.value ? true : false;   }      ngOnInit() {    if(this.location!=null && this.location!=undefined){      this.LocationService.getLocation(this.location.id).subscribe((response: any) => {       this.location = response.data;      this.form.patchValue(response.data);     });    }      // For company dropdown      this.LocationService.getAllCompany().subscribe((response: any) => {         this.countries = response;        this.form.patchValue(response);       });  }    SubmitForm() {    this.LocationService.PostLocation(this.form.value)      .subscribe( data => {        this.router.navigateByUrl('/index');      });  } }

location.component.html<app-progress-line *ngIf="isRequesting"></app-progress-line>   <app-page-container maintitle="Location">      <!--  <h1>{{result}}  Search</h1> -->  <form [formGroup]="form">      <!-- <div>location name: {{location.id}}</div>  -->   <div class="row">     <div class="col-md-6 unit">        <label class="label">Location</label>         <input formControlName="location_name"  class="form-control" type="text" placeholder="{{'Location'}}" id="location_name" name="location_name">            <div *ngIf="form.controls['location_name'].invalid && (form.controls['location_name'].dirty || form.controls['location_name'].touched)" class="alert alert-danger">            <div class="error-message-inline" *ngIf="form.controls['location_name'].errors.required">              Location  is required.            </div>        </div>        </div>       <div class="col-md-6 unit">          <label class="label">Woe ID</label>            <input formControlName="woeid" class="form-control" type="text" placeholder="{{'Woe Id'}}" id="woeid"            name="woeid">             <div *ngIf="form.controls['woeid'].invalid && (form.controls['woeid'].dirty || form.controls['woeid'].touched)" class="alert alert-danger">              <div class="error-message-inline" *ngIf="form.controls['woeid'].errors.required">                Woe Id  is required.              </div>          </div>        </div>      <div class="col-md-6 unit">        <label class="label">Street Address</label>        <input formControlName="streetaddr" class="form-control" type="text" placeholder="{{'Street Address'}}" id="streetaddr"        name="streetaddr">      </div>       <div class="col-md-6 unit">        <label class="label">City</label>        <input formControlName="city" class="form-control" type="text" placeholder="{{'City'}}" id="city"        name="city">      </div>         <div class="col-md-6 unit">        <label class="label">State</label>       <input formControlName="state" class="form-control" type="state" placeholder="{{'State'}}" id="state" name="state">      </div>       <div class="col-md-6 unit">        <label class="label">Country</label>       <input formControlName="country" class="form-control" type="country" placeholder="{{'Country'}}" id="state" name="country">      </div>       <div class="col-md-6 unit">          <label class="label">Company: </label>          <label class="input select">         <!-- <select formControlName="company_id" id="company_id"  class="form-control">            <option value="" selected>Select a Company</option>            <option value="1">1</option>            <option value="2">2</option>            <option value="3">3</option>            <option value="4">4</option>            <option value="5">5</option>          </select>          <i></i> -->          <select id="company_id" formControlName="company_id" class="form-control">            <option value="">Select Company</option>            <option *ngFor="let company of countries" value="{{company['id']}}">{{company['companyName']}}</option>          </select>         <i></i>          </label>        </div>      <div class="col-md-6 unit">         <input formControlName="id" class="form-control" type="hidden"  id="id" name="id">        </div>     </div>    <button (click)="SubmitForm()" class="btn btn-primary" *ngIf="IsEditing()">Edit</button>    <button (click)="SubmitForm()" [disabled] = "!form.valid" class="btn btn-primary" *ngIf="!IsEditing()">Save</button>     &nbsp;<a class="btn btn-danger app-user-single-cancel" routerLink="/index">Cancel</a>  </form>
 </app-page-container>  location.service.tsimport { Injectable } from '@angular/core';import {IUser,IRole,Role} from '@app/definitions';import 'rxjs/add/observable/of';import { Store } from '@ngrx/store';import { HttpClient } from '@angular/common/http';import { IResponse } from 'response-type';import { GetNetworkError, IsSuccessEntity, GetUrl } from '@app/common';import 'rxjs/add/operator/toPromise';import {LocationDetail, CompanyDetail} from '@app/iot/company.interface';import { Observable} from 'rxjs';
@Injectable({  providedIn: 'root'})
export class LocationService {
  constructor(    private http: HttpClient,    private store: Store<LocationDetail>,  ) { }  baseUrl: string = 'http://localhost:8080/UserManagementApp/location/';  baseUrlAllCompany: string = 'http://localhost:8080/UserManagementApp/company/getAllCompany/';   getAllCompany(): Observable<CompanyDetail> {    /* const headers = {      'Authorization': 'Bearer ' + JSON.parse(window.sessionStorage.getItem('token')).access_token,      'Content-type': 'application/json'    } */    const headers = {      'X-Auth-Token': window.sessionStorage.getItem('token'),      'Content-type': 'application/json'    }    return this.http.get<CompanyDetail>(this.baseUrlAllCompany, {headers});  }   getLocation(id): Observable<LocationDetail> {     /*  const headers = {        'Authorization': 'Bearer ' + JSON.parse(window.sessionStorage.getItem('token')).access_token,        'Content-type': 'application/json'      } */      const headers = {        'X-Auth-Token': window.sessionStorage.getItem('token'),        'Content-type': 'application/json'      }      return this.http.get<LocationDetail>(this.baseUrl + id, {headers});    }      PostLocation(location: LocationDetail){    console.log(JSON.stringify(location)+"location");    /* const headers = {      'Authorization': 'Bearer ' + JSON.parse(window.sessionStorage.getItem('token')).access_token,      'Content-type': 'application/json'    } */    const headers = {      'X-Auth-Token': window.sessionStorage.getItem('token'),      'Content-type': 'application/json'    }    return this.http.post(this.baseUrl, location, {headers});  }
  deleteLocation(id: number){    /* const headers = {      'Authorization': 'Bearer ' + JSON.parse(window.sessionStorage.getItem('token')).access_token,      'Content-type': 'application/json'    } */    const headers = {      'X-Auth-Token': window.sessionStorage.getItem('token'),      'Content-type': 'application/json'    }    return this.http.delete(this.baseUrl+id,{headers});  }

   async DeleteLocation (id: number) {    /* const headers = {      'Authorization': 'Bearer ' + JSON.parse(window.sessionStorage.getItem('token')).access_token,      'Content-type': 'application/json'    } */    const headers = {      'X-Auth-Token': window.sessionStorage.getItem('token'),      'Content-type': 'application/json'    }    const ref = this.http.delete(this.baseUrl+id,{headers}).toPromise();   // const ref = this.http.delete(this.baseUrl + 'user/' + id + JSON.parse(window.sessionStorage.getItem('token')).access_token).toPromise();   try {      const response: IResponse<IUser> = await ref;
      if (IsSuccessEntity(response)) {        const $user = response.data;        if ($user) {          this.store.dispatch({            type: 'DELETE_USER',            payload: id          });        }      }      return response;    } catch (error) {      if (error.name === 'HttpErrorResponse') {        return GetNetworkError();      }      return error;    }  } }
